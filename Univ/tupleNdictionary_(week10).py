# 튜플
    # 리스트와 유사하지만 읽기전용, 즉 값 수정이 불가능함.
    # 소괄호를 사용한다       ## ex : (10, 20, 30) , (10,)
    # 튜플 선언하고 나면 값에 접근하거나, 삭제만 가능하다. (del)

# 튜플에 접근
    # 튜플이름[인덱스]
    # 슬라이싱

# 튜플과 리스트의 상호 변환
    # 튜플 > 리스트 > 튜플이 가능해서 리스트로 변환하여 항목을 변경할 수 있다.





# 딕셔너리
    # 단어 의미 그대로 '사전'과 같은 구조를 가짐
    # 중괄호({ })를 사용한다
    # 키(key)와 값(value)의 쌍으로 이루어짐
    # 키 - 값 쌍(key-value pair)을 item이라고 한다.

# 딕셔너리 생성(선언)
    # myDict = {}       # 정보가 없는 딕셔너리
    # myDict = {1:'a', 2:'b', 3:'c'}
    # myDict = {'a':1. 'b':2, 'c':3}

    #  **딕셔너리는 순서가 없는 데이터형이다.
    # >> for문에 사용하지 않거나 인덱스도 없다.**
    # >> 탐색시간이 항상 1이다.

# 데이터의 접근 - 딕셔너리[키]
    # emp_dict = {'사번':1000, '이름':홍길동, '부서':케이팝}
    # print(emp_dict['사번']) >> value값 출력
    # print(emp_dict['부서'])

# 딕셔너리가 갖고 있는 키를 전부 알고 싶을 때
    # print(emp_dict.key())
    # >> dict_keys(['사번', '이름', '부서'])
    # 근데 이 데이터의 형태는 key 출력을 위해 임의로 정의한 형태다.. 그래서 함부로 사용하기 힘듬

    # 그리하여 list(emp_dict.keys())와 같은 방식으로 변환 가능하다

    # for문에도 사용가능
    # for k in emp_dict.keys():
        # print(k)

# 값(value)만 전부 알고 싶을 때
    # emp_dict.values()

# 키-값 쌍을 알고 싶을 때
    # for item in emp_dict.items():
        # print(item)
    # 이 자료형태는 튜플이다. 그래서 index를 이용할 수 있다.
    # for item in emp_dict.items():
        # print(f'{item} - 키 : {item[0], 값 : {item[1]}}'

    # for k, v in emp_dict.items():
        # print(f'키 : {k}, 값 : {v}')

# 딕셔너리에 새로운 아이템을 추가하는 방법
    # emp_dict['전화번호'] = '010-1111-1111'
    # key가 존재한다면 그에 맞는 value를 변경하고, 없는 key값이라면 새로운 item을 생성한다.

#